module Inquisition
  module RailsBestPractices
    class Vulnerability
      ERROR_TYPES = {
        complexity: [
          'RailsBestPractices::Reviews::AddModelVirtualAttributeReview',
          'RailsBestPractices::Reviews::DryBundlerInCapistranoReview',
          'RailsBestPractices::Reviews::IsolateSeedDataReview',
          'RailsBestPractices::Reviews::KeepFindersOnTheirOwnModelReview',
          'RailsBestPractices::Reviews::LawOfDemeterReview',
          'RailsBestPractices::Reviews::MoveCodeIntoControllerReview',
          'RailsBestPractices::Reviews::MoveCodeIntoHelperReview',
          'RailsBestPractices::Reviews::MoveCodeIntoModelReview',
          'RailsBestPractices::Reviews::MoveFinderToNamedScopeReview',
          'RailsBestPractices::Reviews::MoveModelLogicIntoModelReview',
          'RailsBestPractices::Reviews::NeedlessDeepNestingReview',
          'RailsBestPractices::Reviews::ReplaceComplexCreationWithFactoryMethodReview',
          'RailsBestPractices::Reviews::UseModelAssociationReview',
          'RailsBestPractices::Reviews::UseMultipartAlternativeAsContentTypeOfEmailReview',
          'RailsBestPractices::Reviews::UseObserverReview',
          'RailsBestPractices::Reviews::UseScopeAccessReview'
        ],
        style: [
          'RailsBestPractices::Lexicals::LongLineCheck',
          'RailsBestPractices::Lexicals::RemoveTabCheck',
          'RailsBestPractices::Lexicals::RemoveTrailingWhitespaceCheck',
          'RailsBestPractices::Reviews::HashSyntaxReview',
          'RailsBestPractices::Reviews::NotUseTimeAgoInWordsReview',
          'RailsBestPractices::Reviews::OveruseRouteCustomizationsReview',
          'RailsBestPractices::Reviews::ReplaceInstanceVariableWithLocalVariableReview',
          'RailsBestPractices::Reviews::RestrictAutoGeneratedRoutesReview',
          'RailsBestPractices::Reviews::SimplifyRenderInControllersReview',
          'RailsBestPractices::Reviews::UseParenthesesInMethodDefReview',
          'RailsBestPractices::Reviews::UseQueryAttributeReview',
          'RailsBestPractices::Reviews::UseSayWithTimeInMigrationsReview',
          'RailsBestPractices::Reviews::SimplifyRenderInViewsReview'
        ],
        bug_risk: [
          'RailsBestPractices::Reviews::CheckSaveReturnValueReview',
          'RailsBestPractices::Reviews::DefaultScopeIsEvilReview',
          'RailsBestPractices::Reviews::NotRescueExceptionReview',
          'RailsBestPractices::Reviews::CheckDestroyReturnValueReview'
        ],
        unused_code: [
          'RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview',
          'RailsBestPractices::Reviews::RemoveEmptyHelpersReview',
          'RailsBestPractices::Reviews::RemoveUnusedMethodsInHelpersReview',
          'RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview'
        ],
        performance: [
          'RailsBestPractices::Reviews::AlwaysAddDbIndexReview',
          'RailsBestPractices::Reviews::UseTurboSprocketsRails3Review'
        ],
        security: [
          'RailsBestPractices::Reviews::ProtectMassAssignmentReview',
          'RailsBestPractices::Reviews::NotUseDefaultRouteReview'
        ],
        duplication: ['RailsBestPractices::Reviews::UseBeforeFilterReview']
      }.freeze

      def initialize(error)
        @error = error
      end

      def to_h
        {
          category: find_category(error),
          severity: :low,
          message: error.message,
          path: error.short_filename,
          line: error.line_number.to_i
        }
      end

      private

      attr_reader :error

      def find_category(error)
        ERROR_TYPES.each do |category, error_types|
          return category if error_types.include?(error.type)
        end
      end
    end
  end
end
