RSpec.describe Inquisition::RailsBestPractices::Vulnerability do
  describe '#to_h' do
    subject(:vulnerability) { described_class.new(error) }

    let(:message) { 'test message' }
    let(:path) { 'test path' }
    let(:line) { '1' }

    let(:error) do
      instance_double(
        RailsBestPractices::Core::Error,
        short_filename: path,
        line_number: line,
        message: message,
        type: error_type
      )
    end

    let(:options) do
      { category: issue_category, severity: :low, message: message, path: path, line: line.to_i }
    end

    context 'when error type relate to complexity' do
      let(:error_type) { 'RailsBestPractices::Reviews::AddModelVirtualAttributeReview' }
      let(:issue_category) { :complexity }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to style' do
      let(:error_type) { 'RailsBestPractices::Lexicals::LongLineCheck' }
      let(:issue_category) { :style }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to bug_risk' do
      let(:error_type) { 'RailsBestPractices::Reviews::CheckSaveReturnValueReview' }
      let(:issue_category) { :bug_risk }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to unused_code' do
      let(:error_type) { 'RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview' }
      let(:issue_category) { :unused_code }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to perfomance' do
      let(:error_type) { 'RailsBestPractices::Reviews::AlwaysAddDbIndexReview' }
      let(:issue_category) { :performance }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to security' do
      let(:error_type) { 'RailsBestPractices::Reviews::ProtectMassAssignmentReview' }
      let(:issue_category) { :security }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when error type relate to duplication' do
      let(:error_type) { 'RailsBestPractices::Reviews::UseBeforeFilterReview' }
      let(:issue_category) { :duplication }

      it { expect(vulnerability.to_h).to include(options) }
    end
  end
end
