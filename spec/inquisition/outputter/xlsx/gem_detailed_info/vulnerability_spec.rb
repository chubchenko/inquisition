RSpec.describe Inquisition::Outputter::Xlsx::GemDetailedInfo::Vulnerability do
  subject(:gem_detailed_subject) { described_class.new(collection: collection, gem_name: gem_name).call }

  let(:collection) { [issue] }
  let(:runner) { Inquisition::Bundler::Audit::Runner }
  let(:issue) do
    Inquisition::Issue.new(
      path: nil,
      line: nil,
      severity: Inquisition::Severity::HIGH,
      category: Inquisition::Category::SECURITY,
      message: 'Keepalive thread overload/DoS in puma',
      runner: runner.new,
      additional_data: {
        gem_name: 'puma'
      }
    )
  end

  describe '#call' do
    context 'when gem has vulnerability' do
      let(:gem_name) { 'puma' }

      it 'ruturns correct data' do
        expect(gem_detailed_subject[:detailed_status]).to eq(described_class::MESSAGE)
        expect(gem_detailed_subject[:color]).to eq(described_class::COLOR)
      end

      it 'match hash structure' do
        expect(gem_detailed_subject).to include(:detailed_status, :color)
      end
    end

    context 'when gem hasn\'t any vulnerabilities' do
      let(:gem_name) { 'devise' }

      it 'returns nil' do
        expect(gem_detailed_subject[:detailed_status]).to be_nil
        expect(gem_detailed_subject[:color]).to be_nil
      end
    end

    context 'when runner doesn\'t returns any issue' do
      let(:gem_name) { 'devise' }
      let(:runner) { Inquisition::Fasterer::Runner }

      it 'returns nil' do
        expect(gem_detailed_subject[:detailed_status]).to be_nil
        expect(gem_detailed_subject[:color]).to be_nil
      end
    end

    context 'when hasn\'t any issues' do
      let(:collection) { [] }
      let(:gem_name) { 'devise' }

      it 'returns nil' do
        expect(gem_detailed_subject[:detailed_status]).to be_nil
        expect(gem_detailed_subject[:color]).to be_nil
      end
    end
  end
end
