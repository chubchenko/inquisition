RSpec.describe Inquisition::Rubocop::Vulnerability do
  describe '#to_h' do
    subject(:vulnerability) { described_class.new(file, offense) }

    let(:file) { 'test/file.rb' }
    let(:line) { 1 }
    let(:message) { 'test message' }

    let(:offense) do
      instance_double(
        RuboCop::Cop::Offense,
        severity: rubocop_severity,
        message: message,
        line: line,
        cop_name: cop_name
      )
    end

    let(:options) do
      {
        severity: inquisition_severity,
        message: message,
        path: file,
        line: line,
        category: category
      }
    end

    context 'when offence name is convention & category is security' do
      let(:rubocop_severity) { instance_double(RuboCop::Cop::Severity, name: :convention) }
      let(:inquisition_severity) { Inquisition::Severity::LOW }
      let(:cop_name) { 'Security/Eval' }
      let(:category) { Inquisition::Category::SECURITY }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when offence name is refactor & category is duplication' do
      let(:rubocop_severity) { instance_double(RuboCop::Cop::Severity, name: :refactor) }
      let(:inquisition_severity) { Inquisition::Severity::LOW }
      let(:cop_name) { 'Bundler/DuplicatedGem' }
      let(:category) { Inquisition::Category::DUPLICATION }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when offence name is warning & category is style' do
      let(:rubocop_severity) { instance_double(RuboCop::Cop::Severity, name: :warning) }
      let(:inquisition_severity) { Inquisition::Severity::MEDIUM }
      let(:cop_name) { 'Metrics/LineLength' }
      let(:category) { Inquisition::Category::STYLE }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when offence name is error & category is performance' do
      let(:rubocop_severity) { instance_double(RuboCop::Cop::Severity, name: :error) }
      let(:inquisition_severity) { Inquisition::Severity::HIGH }
      let(:cop_name) { 'Migrations/RemoveIndex' }
      let(:category) { Inquisition::Category::PERFORMANCE }

      it { expect(vulnerability.to_h).to include(options) }
    end

    context 'when offence name is fatal & category is complexity' do
      let(:rubocop_severity) { instance_double(RuboCop::Cop::Severity, name: :fatal) }
      let(:inquisition_severity) { Inquisition::Severity::HIGH }
      let(:cop_name) { 'Metrics/BlockLength' }
      let(:category) { Inquisition::Category::COMPLEXITY }

      it { expect(vulnerability.to_h).to include(options) }
    end
  end
end
